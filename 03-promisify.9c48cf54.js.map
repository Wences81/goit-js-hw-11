{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GACL,IAAIC,QAAQ,CAACC,EAASC,KAC7BC,WAAW,KACTF,EAAQF,IACPA,KAICK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAE1D,OAAA,IAAIjB,QAAS,CAACC,EAASC,KAC9BD,EAASc,MAKXH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAO5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,CAACC,EAASC,KACrByB,MAAAA,EAAaL,KAAKE,SAAW,GACnCrB,WAAW,KAELwB,EACF1B,EAAQyB,EAAYE,GAAI9B,GAExBI,EAAOwB,EAAYE,KAEpB9B,MAID+B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAI/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAOH,GAEjEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAOH,GAEjEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAOH,GAEhEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAOH","file":"03-promisify.9c48cf54.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  return new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(ms);\n  }, ms);\n });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n  );\n  return new Promise ((resolve, reject) => {\n  resolve (updatedUsers);\n    })\n};\n\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// The function should work like this\n// toggleUserState(users, 'Mango').then(console.table);\n// toggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n    setTimeout(() => {\n    \n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  }) \n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch (logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch (logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch (logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch (logError);"]}