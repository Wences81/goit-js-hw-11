{"version":3,"sources":["js/02-timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","startBtn","input","getElementById","CountdownTimer","constructor","targetDate","intervalId","isActive","start","setInterval","startTime","Date","countTime","timeCount","getTimeComponents","updateClockface","time","padday","Math","floor","pad","value","String","padStart","textContent","timer","addEventListener"],"mappings":";;;AA6FA,aA7FA,QAAA,mBAGA,MAAMA,EAAO,CACDC,KAAMC,SAASC,cAAc,eAC7BC,MAAOF,SAASC,cAAc,gBAC9BE,KAAMH,SAASC,cAAc,kBAC7BG,KAAMJ,SAASC,cAAc,kBAC7BI,SAAUL,SAASC,cAAc,gBACjCK,MAAON,SAASO,eAAe,qBAG3C,MAAMC,EACFC,aAAY,WAAEC,IAELA,KAAAA,WAAaA,EACbC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXd,KAAAA,KAAO,CACRC,KAAMC,SAASC,cAAc,eAC7BC,MAAOF,SAASC,cAAc,gBAC9BE,KAAMH,SAASC,cAAc,kBAC7BG,KAAMJ,SAASC,cAAc,kBAC7BI,SAAUL,SAASC,cAAc,gBACjCK,MAAON,SAASO,eAAe,qBAiBvCM,QACQ,KAAKD,WAIRA,KAAAA,UAAW,EACZE,YAAY,KACNC,MAAAA,EAAY,IAAIC,KAChBC,EAAY,KAAKP,WAAaK,EAC9BG,EAAW,KAAKC,kBAAkBF,GACnCG,KAAAA,gBAAgBF,IAEvB,MAKFC,kBAAkBE,GAMX,MAAA,CAAEtB,KALK,KAAKuB,OAAOC,KAAKC,MAAMH,EAAQ,QAK9BnB,MAJD,KAAKuB,IAAIF,KAAKC,MAAOH,EAAQ,MAAyB,OAI9ClB,KAHR,KAAKsB,IAAIF,KAAKC,MAAOH,EAAQ,KAAoB,MAGnCjB,KAFd,KAAKqB,IAAIF,KAAKC,MAAOH,EAAQ,IAAc,OAKzDC,OAAOI,GACIC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrCH,IAAIC,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGjCR,iBAAgB,KAAErB,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAChCN,KAAAA,KAAKC,KAAK8B,eAAiB9B,IAC3BD,KAAAA,KAAKI,MAAM2B,eAAiB3B,IAC5BJ,KAAAA,KAAKK,KAAK0B,eAAiB1B,IAC3BL,KAAAA,KAAKM,KAAKyB,eAAiBzB,KAOpC,MAAM0B,EAAS,IAAItB,EAAe,CAE9BE,WAAY,IAAIM,KAAK,kBAKzBlB,EAAKO,SAAS0B,iBAAiB,QAAS,KACpCD,EAAMjB","file":"02-timer.cf98428a.js","sourceRoot":"../src","sourcesContent":["import '../css/main.css';\n\n\nconst refs = {\n            days: document.querySelector('[data-days]'),\n            hours: document.querySelector('[data-hours]'),\n            mins: document.querySelector('[data-minutes]'),\n            secs: document.querySelector('[data-seconds]'),\n            startBtn: document.querySelector('[data-start]'),\n            input: document.getElementById('[#date-selector]'),\n        };\n  \nclass CountdownTimer {\n    constructor({ targetDate }) {\n        \n        this.targetDate = targetDate;\n        this.intervalId = null;\n        this.isActive = false;\n        this.refs = {\n            days: document.querySelector('[data-days]'),\n            hours: document.querySelector('[data-hours]'),\n            mins: document.querySelector('[data-minutes]'),\n            secs: document.querySelector('[data-seconds]'),\n            startBtn: document.querySelector('[data-start]'),\n            input: document.getElementById('[#date-selector]'),\n        };\n    }\n\n        // setInterval(() => {\n        //     const startDate = Date.now();\n        //     const time = this.targetDate - startDate;\n        //     if (time > 0) {\n        //         const { days, hours, mins, secs } = this.getTimeComponents(time);\n        //         this.updateClockface(this.getTimeComponents(time));\n        //     } else {\n        //         clearInterval();\n                \n        //     }            \n        // }, 1000);\n    \n\n    start() {\n        if (this.isActive) {\n            return;\n    };\n   \n    this.isActive = true;    \n        setInterval(() => { \n        const startTime = new Date();\n        const countTime = this.targetDate - startTime;\n        const timeCount= this.getTimeComponents(countTime);\n        this.updateClockface(timeCount);\n        }\n    , 1000);\n    }\n    \n\n\n    getTimeComponents(time) {\n    const days =  this.padday(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins =  this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs =  this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n\n    padday(value) {\n        return String(value).padStart(3, '0');\n    }\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    }\n\n    updateClockface({ days, hours, mins, secs }) {\n    this.refs.days.textContent = `${days}`;\n    this.refs.hours.textContent = `${hours}`;\n    this.refs.mins.textContent = `${mins}`;\n    this.refs.secs.textContent = `${secs}`; \n}\n};\n\n\n \n\nconst timer =  new CountdownTimer({\n    \n    targetDate: new Date('Jul 27, 2021'),    \n});\n\n\n\nrefs.startBtn.addEventListener('click', () => {\n    timer.start();\n});\n\n"]}