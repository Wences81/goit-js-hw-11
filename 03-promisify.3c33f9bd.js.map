{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GACJC,QAAQC,QAAQF,GAIpBG,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAIpBC,EAAkB,CAACC,EAAUC,IACvB,IAAIZ,QAASC,IAOvBA,EAL0BU,EAASE,IAAIC,GAEnCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAWnEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAK5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACjB,IAAIvB,QAAS,CAACC,EAAQuB,KACrB1B,MAAAA,EAAQkB,EAA0B,IAAK,KAE7CS,WAAW,KACUN,KAAKE,SAAW,IAGjCpB,EAASH,GAET0B,EAAOD,EAAYG,KACpB5B,KAGC6B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAI/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"03-promisify.3c33f9bd.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  return  Promise.resolve(ms);\n}\n\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n  \n];\n\nconst toggleUserState = (allUsers, username) => {\n     return new Promise (resolve => {\n\n       const updatedUsers = allUsers.map(user =>\n      \n      user.name === username ? { ...user, active: !user.active } : user\n  )\n  \n  resolve (updatedUsers);\n    })\n};\n\n\n\n\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n// ======================= Subtask 3 =======================\n  \nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => { \n  return new Promise ((resolve,reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve( delay );\n      } \n        reject(transaction.id);\n    }, delay);\n  })};\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  // The function should work like this\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}